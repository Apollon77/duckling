name: Release

on:
  # Trigger the workflow on the new 'v*' tag created
  push:
    workflow_dispatch: # Manually on demand
    tags:
      - "v*"
    branches:
      - "*"
    schedule:
      # additionally run once per week (At 00:00 on Sunday) to maintain cache
      - cron: '0 0 * * 0'
jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1.1.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: true
#          prerelease: false

#      - name: Output Release URL File
#        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
#      - name: Save Release URL File for publish
#        uses: actions/upload-artifact@v1
#        with:
#          name: release_url
#          path: release_url.txt

  build_artifact:
    needs: [create_release]
    name: ${{ matrix.os }}/GHC ${{ matrix.ghc }}/${{ github.ref }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        stack: ["2.5.1"]
        cabal: [ "3.6.2.0" ]
        ghc: ["8.6.5", "8.8.4", "8.10.3", "9.0.1"]
        exclude:
          - os: macOS-latest
            ghc: 8.10.3
          - os: macOS-latest
            ghc: 8.8.4
          - os: macOS-latest
            ghc: 8.6.5

          - os: windows-latest
            ghc: 8.10.3
          - os: windows-latest
            ghc: 8.8.4
          - os: windows-latest
            ghc: 8.6.5
#        ghc:
#          - "8.10.7"
#          - "9.0.2"
#          - "9.2.1"
#        exclude:
#          - os: macOS-latest
#            ghc: 9.0.2
#          - os: macOS-latest
#            ghc: 8.10.7

#          - os: windows-latest
#            ghc: 9.0.2
#          - os: windows-latest
#            ghc: 8.10.7

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set tag name
        uses: olegtarasov/get-tag@v2
        id: tag
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1

      - name: Setup Haskell
        uses: haskell/actions/setup@v1
        id: setup-haskell-cabal
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}
          stack-version: ${{ matrix.stack }}

#      - name: Cache ~/.cabal/store
#        uses: actions/cache@v2
#        with:
#          path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
#          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}

      - uses: actions/cache@v2.1.4
        name: Cache ~/.stack
        with:
          path: ~/.stack
          key: ${{ runner.os }}-${{ matrix.ghc }}-stack

      - name: Install dependencies
        run: |
          cabal build all --only-dependencies          

      - name: Build
        run: |
          stack build duckling:lib --system-ghc --test --bench --no-run-tests --no-run-benchmarks

      #      - name: Freeze
      #        run: |
      #          cabal freeze

      - name: Build binary
        run: |
          mkdir dist
          cabal install exe:duckling-example-exe --install-method=copy --overwrite-policy=always --installdir=dist

      - if: matrix.os == 'windows-latest'
        id: build-windows-exe
        name: Set extension to .exe on Windows
        run: echo "::set-output name=EXT::.exe"

      - name: Set binary path name
        id: set-binary-path-name
        run: echo "::set-output name=BINARY_PATH::./dist/duckling-example-exe${{ steps.build-windows-exe.outputs.EXT }}"

      - name: Compress binary
        uses: svenstaro/upx-action@2.0.1
        with:
          file: ${{ steps.set-binary-path-name.outputs.BINARY_PATH }}

#      - name: Load Release URL File from release job
#        uses: actions/download-artifact@v1
#        with:
#          name: release_url

#      - name: Get Release File Name & Upload URL
#        id: get_release_info
#        run: |
#          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"

#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
#          asset_path: ${{ env.BINARY_PATH }}
#          asset_name: stan-${{ steps.tag.outputs.tag }}-${{ runner.os }}-ghc-${{ matrix.ghc }}${{ env.EXT }}
#          asset_content_type: application/octet-stream
